// <auto-generated />
using System;
using DataLayer.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240606115454_BlogSampleDbThirdMig")]
    partial class BlogSampleDbThirdMig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Model.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4383),
                            Description = "A design and development agency based in London. We create digital products that make people’s lives easier.",
                            IsActive = true,
                            Name = "Header"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4384),
                            Description = "~/images/About/about@2x.jpg",
                            IsActive = true,
                            Name = "Img"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4385),
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam,",
                            IsActive = true,
                            Name = "Story"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4386),
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam,",
                            IsActive = true,
                            Name = "Mission"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4387),
                            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam,",
                            IsActive = true,
                            Name = "Value"
                        });
                });

            modelBuilder.Entity("DataLayer.Model.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "role1",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "role2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("DataLayer.Model.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b7f4463f-9be3-4ca8-9891-c420238d25e9",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHkWILUQg4eLVIlJt2v5HpwwTm2aIEOgcxGK4ZTuA7y3jJ149grSN6EoU5E6uPFZOw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "~/dist/img/user2-160x160.jpg",
                            SecurityStamp = "1d62b8c1-4b70-4cf5-828b-c66be5d11e94",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "06958b51-4122-4975-a948-917ae6f96776",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECIli1fC67cDgHMsATkJ230pEfrutBzas9ewLIFNI8rf29jNWKfm3Vkxkoow0KneOg==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "~/dist/img/user2-160x160.jpg",
                            SecurityStamp = "2c635e53-a289-4500-82a9-15fde356c7d0",
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67c197e1-623f-4142-9fee-b15909e6f191",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELd6ieCV4gEeb0drxEL1cSdQC4l7e/fjLEarew0i2eCX1RNaGBY/yltw7HrN+GEfOw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "~/dist/img/user2-160x160.jpg",
                            SecurityStamp = "d815f00d-a809-47a8-85ee-ede285926a4d",
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com"
                        },
                        new
                        {
                            Id = "user3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ad7dcc9-9ec2-4e5b-845a-ff834126dfdd",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4VDkxHhO4uC6sv2fIkZSmnJsyT27ltxEC6Ys8z/+MRXKWcjVF80NFFyh5Rzh5EFw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "~/dist/img/user2-160x160.jpg",
                            SecurityStamp = "61925cd2-b828-40f0-84f7-b28d3ddc97cb",
                            TwoFactorEnabled = false,
                            UserName = "user3@example.com"
                        },
                        new
                        {
                            Id = "user4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d7198dc-2149-4825-bece-830baf115f2f",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEArAQP9U16sgEVxSzu2UsydXNMhaI1YQhkjahZy1eJ5ktSyzeniAauleQNhvDpbY8A==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "~/dist/img/user2-160x160.jpg",
                            SecurityStamp = "810e0b8e-9bf2-4a30-95b1-3908a5bc16de",
                            TwoFactorEnabled = false,
                            UserName = "user4@example.com"
                        });
                });

            modelBuilder.Entity("DataLayer.Model.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 1",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_2@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 2",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_8@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 3",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_7@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 4",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_6@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 5",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_5@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 6",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_4@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 7",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_3@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 8",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_2@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Date = new DateTime(2020, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description for Blog 9",
                            IsActive = true,
                            ThumbnailPath = "~/images/Bloggrid/Bloggrid_1@2x.jpg",
                            Title = "Why you must experience design at least once",
                            UserId = "admin1"
                        });
                });

            modelBuilder.Entity("DataLayer.Model.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DataLayer.Model.CartDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("DataLayer.Model.ClientSay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ClientSays");
                });

            modelBuilder.Entity("DataLayer.Model.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("DataLayer.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DataLayer.Model.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DataLayer.Model.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("DataLayer.Model.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Portfolios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_9@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 2,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_8@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 3,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_7@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 4,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_6@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 5,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_5@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 6,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_4@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 7,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_3@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 8,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_2@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        },
                        new
                        {
                            Id = 9,
                            Client = "Branding Client",
                            CreatedDate = new DateTime(2024, 5, 30, 11, 7, 55, 0, DateTimeKind.Utc),
                            Description = "A branding project with a simple design approach.",
                            IsActive = true,
                            ProjectUrl = "~/images/Standard_list_blog/Standard_1@2x.jpg",
                            Title = "Simple Design",
                            UserId = "admin1"
                        });
                });

            modelBuilder.Entity("DataLayer.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4291),
                            Description = "A high-quality flying ninja toy.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Flying Ninja",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4294),
                            Description = "An invisible ninja toy with stealth mode.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Invisible Ninja",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4297),
                            Description = "A fast ninja toy with lightning speed.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Speed Ninja",
                            Price = 18.00m
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4299),
                            Description = "A stealthy ninja toy with night vision.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Stealth Ninja",
                            Price = 22.00m
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4301),
                            Description = "A shadow ninja toy that blends into the dark.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Shadow Ninja",
                            Price = 19.00m
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4308),
                            Description = "A samurai ninja toy with a katana.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Samurai Ninja",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4310),
                            Description = "A rogue ninja toy with dual blades.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Rogue Ninja",
                            Price = 23.00m
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4313),
                            Description = "A mystic ninja toy with magical powers.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Mystic Ninja",
                            Price = 28.00m
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 6, 11, 54, 53, 271, DateTimeKind.Utc).AddTicks(4315),
                            Description = "A warrior ninja toy with armor.",
                            ImageUrl = "~/images/Shop/shop@2x.jpg",
                            IsActive = true,
                            Name = "Warrior Ninja",
                            Price = 30.00m
                        });
                });

            modelBuilder.Entity("DataLayer.Model.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "admin1",
                            RoleId = "role2"
                        },
                        new
                        {
                            UserId = "user1",
                            RoleId = "role1"
                        },
                        new
                        {
                            UserId = "user2",
                            RoleId = "role1"
                        },
                        new
                        {
                            UserId = "user3",
                            RoleId = "role1"
                        },
                        new
                        {
                            UserId = "user4",
                            RoleId = "role1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataLayer.Model.Blog", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationUser", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Model.Cart", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationUser", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Model.CartDetail", b =>
                {
                    b.HasOne("DataLayer.Model.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Model.Product", "Product")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataLayer.Model.News", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Model.Order", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Model.OrderDetail", b =>
                {
                    b.HasOne("DataLayer.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataLayer.Model.Portfolio", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationUser", "User")
                        .WithMany("Portfolios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataLayer.Model.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.Model.ApplicationUser", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Portfolios");
                });

            modelBuilder.Entity("DataLayer.Model.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("DataLayer.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("DataLayer.Model.Product", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
